name: 'Telnyx PR Reviewer'
description: 'A GitHub Action to review pull requests using Telnyx AI'
branding:
  icon: 'check-circle'
  color: 'green'
author: 'team-telnyx'
inputs:
  telnyx_api_key:
    description: 'Telnyx API Key'
    required: true
  model_name:
    description: 'Model Name'
    default: 'meta-llama/Meta-Llama-3.1-8B-Instruct'
runs:
  using: 'composite'
  steps:
    - name: Install prerequisites
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Review PR
      shell: bash
      run: |
        echo "Reviewing PR in $GITHUB_REPOSITORY"
        # Check if TELNYX_API_KEY is set
        if [ -z "$TELNYX_API_KEY" ]; then
          echo "Error: TELNYX_API_KEY environment variable is not set."
          exit 1
        fi
        
        echo "Fetching PR diff"
        # Get the diff of the current branch against the base branch
        set -eo pipefail
        
        # Create a temporary file to store the diff
        DIFF_FILE=$(mktemp)
        PROCESSED_FILE=$(mktemp)
        trap 'rm -f "$DIFF_FILE" "$PROCESSED_FILE"' EXIT
        
        # Fetch the diff into the temp file
        if ! gh pr diff ${{ github.event.number }} --patch > "$DIFF_FILE"; then
          echo "::error::Failed to fetch PR diff"
          exit 1
        fi
        
        # Remove empty lines and store in intermediate file
        if ! grep -vE "^$" "$DIFF_FILE" > "$PROCESSED_FILE"; then
          echo "::error::Failed to process PR diff"
          exit 1
        fi
        
        # Truncate and process the diff
        if ! pr_diff=$(dd if="$PROCESSED_FILE" bs=100000 count=1 2>/dev/null | \
                      jq -Rs . | \
                      sed -E 's/(^"|"$)//g'); then
          echo "::error::Failed to format PR diff"
          exit 1
        fi
        
        # Check if the diff was truncated
        original_size=$(wc -c < "$PROCESSED_FILE")
        if [ "$original_size" -gt 100000 ]; then
          echo "Note: PR diff was truncated to 100KB for processing."
        fi
        
        if [ -z "$pr_diff" ]; then
          echo "::error::PR diff is empty"
          exit 1
        fi
        
        echo "Building payload"
        payload_file=$(mktemp)
        cat > "$payload_file" <<EOF
        {
          "model": "$MODEL_NAME",
          "messages": [{"role": "user", "content": "Review this PR for me, be descriptive but straightforward, tell me what it does, a brief summary of the changes and if there are any reasons to reject this PR: \n$pr_diff"}]
        }
        EOF

        # Query TelnyxInference and extract only the response content
        response=$(curl -s https://api.telnyx.com/v2/ai/chat/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TELNYX_API_KEY" \
          -d "@$payload_file" | jq -r ".choices[].message.content")

        # Clean up temp file
        rm -f "$payload_file"

        if [ $? -ne '0' ]; then
          echo "Unable to contact TelnyxInference"
          echo "Exiting with status 0 so we don't block merges and this is probably caused by a large diff"
          exit 0
        fi

        # Publish the review comment using gh CLI
        set +e
        gh pr comment ${{ github.event.number }} -b "Automated $MODEL_NAME review: $response" --edit-last

        if [ $? -ne '0' ]; then
          gh pr comment ${{ github.event.number }} -b "Automated $MODEL_NAME review: $response"
        fi
        set -e
      env:
        TELNYX_API_KEY: ${{ inputs.telnyx_api_key }}
        MODEL_NAME: ${{ inputs.model_name }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
